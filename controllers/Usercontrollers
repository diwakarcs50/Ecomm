const crypto=require("crypto")
const User = require('../models/Users');
const customError = require('../utils/customerror');
const Cookietoken = require('../utils/cookieToken');
const cloudinary = require('cloudinary').v2;


const mailhelper=require('../utils/mailHelper');
const { Cursor } = require('mongoose');





exports.signup = async (req, res, next) => {
  try {
    if (!req.files) {
      throw new customError('Please upload an image', 400);
    }

    const file = req.files.photo;

    let result;
    try {
      result = await cloudinary.uploader.upload(file.tempFilePath, {
        folder: 'test',
        width: 150,
      });
    } catch (error) {
        console.error('clodinary error ',error)
      throw new customError('Error uploading image to Cloudinary', 500);
    }

    const { name, email, password } = req.body;

    if (!name || !email || !password) {
      throw new customError('Please provide name, email, and password', 400);
    }

    const user = await User.create({
      name,
      email,
      password,
      photo: {
        id: result.public_id,
        secure_url: result.secure_url,
      },
    });

    Cookietoken(res, user);

    res.status(200).json({
      success: true,
      message: 'User created and logged in successfully',
      data: user,
    });
  } catch (error) {
    next(error); // Pass the error to the error handling middleware
  }
};


exports.signin=async(req,res,next)=>{
    try{
        const {email,password}=req.body
        if( ! email|| !password){
           return  next(new customError(`fields missing`,501))
        }
      

        //checking in the database
        const user=await User.findOne({email}).select('+password')

        if(!user){
            throw new customError('you are not a registered user',404)
        }
        const IsPasswordCorrect=await user.IsPasswordValidate(password)
        if(!IsPasswordCorrect){
            console.log(IsPasswordCorrect)
            console.log(user.password)
            console.log(password)
           return next(new customError('password wrong',201)) 
        }

         Cookietoken(res,user)
        
    }
    catch(error){
       next(error)
    }
   



}

exports.logout=async(req,res,next)=>{
    res.cookie('cookieToken',null,{
      expires:new Date(Date.now()),
      httpOnly:true

    })
    res.status(200).json({
      success:true,
      message:"logout was successfull"
    })


}

//mail will be sent
exports.forgotpassword=async(req,res,next)=>{
   const {email}=req.body

  const user= await User.findOne({email})

  if(!user){
    return next(new customError(`user is not registered`,500))
  }

  const forgotoken=user.getforgotPassword()

   await user.save({validateBeforeSave : false})

   const myurl=`${req.protocol}://${req.get("host")}/password/reset/${forgotoken}`
   
  const message=`copy paste the link in your url and hit enter${myurl}`


 
 try{
     await mailhelper({
      email:user.email,
      subject:'regading forgot password from lcoTstrore',
      message

     })

     res.json({
      success:'mail sent'
     })
 }
  catch(error){
    user.forgotpasswordToken=undefined
    user.forgotpasswordExpiry=undefined
    await user.save({validateBeforeSave:false})
    console.log(error)
    return next(new customError(`email not sent `,500))

  }

}

exports.passwordreset=async(req,res,next)=>{
  try{
    const token=req.params.token
    
    //since we did not get the encryted token
    const encryptedtoken=crypto.createHash('sha256').update(token).digest('hex')
     
    console.log(encryptedtoken)
    const user=await User.findOne({
      forgotpasswordToken:encryptedtoken,
      forgotpasswordExpiry:{$gt: Date.now()}
    })
     console.log(user)

    if(!user){
      return next(new customError(`user not found or token expired`,400))
    }
    

    // const password=req.body
    // const confirmPassword=req.body
    

      if(req.body.password!==req.body.confirmPassword){
        return next(new customError(`password does not match`,200))
      }
 

   user.password=req.body.password
   user.forgotpasswordToken=undefined
   user.forgotpasswordExpiry=undefined

   await user.save()

   //send jsomn response or token 

   res.json({
    success:"success"
   })
   Cookietoken(res,user)
  }
  catch(error){
    console.log(error)
  }
   
}
    
   //
  //  "password":"123456",
  //  "confirmPassword":"123456"

  //get the user information in dashboard with help of middleware req.user
  exports.dashboard=async(req,res,next)=>{
       try{
        const Id=req.user.id
        const user= await User.findById(Id)
        if(!user){
          return next(new customError('user not found',400))
        }
         

        res.status(200).json({
          success:true,
          user

        })

       }
       catch(error){
          return next(new customError('error occured in dashboard',404))
       }
  }

//change password route
  exports.changePassword=async(req,res,next)=>{
    try{
      const id=req.user.id
      const user=await User.findById(id).select("+password")




     const valid= user.IsPasswordValidate(req.body.oldPassword)

      if(!valid){
        return next(new customError('password not validated',400))
      }
      user.password=req.body.newPassword

      await user.save()

      Cookietoken(res,user)
      
      res.json({
        success:true ,
        user
      })

     
    }
    catch(error){
      return next(error)
    }
    
    

  }

  //adding user details
  exports.updateDetails=async(req,res,next)=>{
       try{
        const id=req.user.id
        const newData={
          name:req.body.name,
          email:req.body.email,

        }

        
        if(req.files){
          const user=await User.findById(req.user.id)

          const ImageId=user.photo.id
         
          //delete photo from cloudinary
          const resp=await cloudinary.v2.uploader.destroy(ImageId)

           //get the response after uploading user provided image 
          const result=await cloudinary.v2.uploader.upload(req.files.photo.tempFilePath,{
            folder:"test",
            width:150,
        
          } )

          newData.photo={

            id:result.public_id,
            secure_url:result.secure_url
        }

          }

        const user=await User.findByIdAndUpdate(req.user.id,newData,{
          new:true,
          runValidators:true,
          useFindAndModify:true
        })

         console.log(user)
         
         res.json({
          success:true,
          user
        })
       }
       catch(error){
           return next(error)
       }    
  }

//admin role added
  exports.adminAllUser=async(req,res,next)=>{
   try{
    const users=await User.find()
    
    res.json(
      users
    )

   }
   catch(error){
    return next(error)

   }
  }

  //manager role added
  exports.managerAllUser=async(req,res,next)=>{
    try{
        const managerUser=await User.find({role: 'manager'})
        if(!managerUser){
          return next(new customError('manager user not present',400))
        }
        res.json({
          success:"true",
          managerUser
        })
    }
    catch(error){
        return next(error)
    }
  }


  exports.adminGetOneUser=async(req,res,next)=>{
    try{
      const user=await User.findById(req.params.id)
      if(!user){
        return next(new customError("user not found of given id",200))
      }

      res.json({
        success:true,
        user
      
      })


    }
    catch(error){
       return next(error)
    }
   
    

  }

  exports.adminCanUpdate=async(req,res,next)=>{
    try{
      // const userId=req.params.id

      const newData={
          name:req.body.name,
          email:req.body.email,
          role:req.body.role
      }
      const user=await User.findByIdAndUpdate(req.params.id,newData,{
        new:true,
        runValidators:true,
        useFindAndModify:true
      })
      res.status(200).json({
        success:true,
        user
      })

  
    }
    catch(error){
      return next(error)

    }

  }